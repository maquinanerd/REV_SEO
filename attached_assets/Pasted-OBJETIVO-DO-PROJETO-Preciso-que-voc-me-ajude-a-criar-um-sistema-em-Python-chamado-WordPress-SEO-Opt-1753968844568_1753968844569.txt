OBJETIVO DO PROJETO
Preciso que voc√™ me ajude a criar um sistema em Python chamado WordPress SEO Optimizer para rodar no Replit.
Este sistema far√° otimiza√ß√£o SEO autom√°tica em posts do WordPress usando Google Gemini AI, TMDB API, atualiza√ß√£o de campos do plugin Yoast SEO via REST API e um painel Flask para monitoramento em tempo real.

‚úÖ FUNCIONALIDADES J√Å PLANEJADAS
üîπ Integra√ß√µes:
WordPress REST API (com autentica√ß√£o por App Password)

Google Gemini 1.5 Flash (com altern√¢ncia entre m√∫ltiplas chaves quando a quota estourar)

TMDB API (para obter imagens, trailers, e detalhes de filmes/s√©ries)

Yoast SEO (via REST API + register_meta() no WordPress)

üîπ Recursos do sistema:
Agendamento peri√≥dico (ex.: a cada 60 minutos)

Apenas 2 posts otimizados por ciclo (para controle de quota)

Extra√ß√£o de t√≠tulo do post

Identifica√ß√£o da categoria (Filme = ID 24 | S√©rie = ID 21)

Otimiza√ß√£o do conte√∫do com AI usando prompt para Google News

Atualiza√ß√£o no WordPress do:

t√≠tulo

excerpt

conte√∫do

e campos de SEO do Yoast:

_yoast_wpseo_title

_yoast_wpseo_metadesc

_yoast_wpseo_focuskw

üîπ Painel Flask:
Exibe status do sistema

Logs de execu√ß√£o

Estat√≠sticas salvas em banco SQLite

Interface web (usar dashboard.py)

‚úÖ MELHORIAS J√Å IMPLEMENTADAS
Altern√¢ncia autom√°tica entre m√∫ltiplas chaves da API Gemini

Retry com backoff exponencial

Logs e controle de quota em gemini_quota.json

Extra√ß√£o de t√≠tulo mais precisa com filtros

Busca melhorada por categoria na TMDB

Plugin (ou snippet) no WordPress com register_meta() para os campos do Yoast estarem acess√≠veis via API

Atualiza√ß√£o completa de posts (incluindo metadados Yoast)

üìÅ ARQUITETURA DO SISTEMA (m√≥dulos esperados)
main.py
Classe: SEOOptimizer

Respons√°vel por:

Orquestrar execu√ß√£o peri√≥dica

Verificar quota

Buscar posts do autor Jo√£o (ID 6)

Rodar o ciclo de otimiza√ß√£o

gemini_client.py
Classe: GeminiClient

Usa Google Gemini 1.5 Flash

Alterna entre chaves automaticamente

Retry inteligente com logs de erro

Recebe conte√∫do e retorna t√≠tulo, descri√ß√£o, texto otimizado

wordpress_client.py
Classe: WordPressClient

Fun√ß√µes:

Buscar posts recentes de um autor

Atualizar conte√∫do via REST

Atualizar campos do Yoast via meta

get_post_categories() para identificar categoria (ID 21 ou 24)

tmdb_client.py
Classe: TMDBClient

Busca informa√ß√µes baseadas em:

Categoria (filme ou s√©rie)

Tags do post (ator, nome da obra, etc.)

Retorna poster, backdrop, trailer do YouTube

dashboard.py
Flask app

Exibe:

Status do sistema

Uso de quota

Posts otimizados

Logs

(corrigido: erro JS de redeclara√ß√£o)

config.py
Classe: Config

Carrega .env

Valida chaves e dom√≠nio

Suporte a m√∫ltiplas chaves de API

üì¶ ESTRUTURA DE ARQUIVOS
main.py

gemini_client.py

wordpress_client.py

tmdb_client.py

dashboard.py

config.py

seo_optimizer.log

gemini_quota.json

seo_dashboard.db

üß† PROMPT SEO USADO NA IA (GEMINI)
O conte√∫do gerado pela IA deve:

Otimizar o post para Google News

Usar tom jornal√≠stico

Adicionar negrito em termos importantes

Inserir links internos baseados nas tags do post

Incluir m√≠dia da TMDB (poster, trailer)

Escrever em par√°grafos curtos e bem estruturados

‚öôÔ∏è EXECU√á√ÉO
Rodar apenas uma vez (teste):
bash
Copiar
Editar
python main.py --once
Rodar continuamente (produ√ß√£o):
bash
Copiar
Editar
python main.py
Acessar o painel:
bash
Copiar
Editar
python dashboard.py
üîê .env (exemplo)
env
Copiar
Editar
# WordPress
WORDPRESS_URL=https://www.maquinanerd.com.br/
WORDPRESS_USERNAME=Abel
WORDPRESS_PASSWORD=Hl7M 5ZOE hMNQ M7A9 gFVy IEsB
WORDPRESS_DOMAIN=https://www.maquinanerd.com.br/

# Google Gemini
GEMINI_API_KEY=AIzaSyD7X2_8KPNZrnQnQ_643TjIJ2tpbkuRSms
GEMINI_API_KEY_1=AIzaSyDDkQ-htQ1WsNL-i6d_a9bwACL6cez8Cjs
GEMINI_API_KEY_2=AIzaSyDIV2OX6OujMmXzVaxMOREjJ3tGC8DP7wg

# TMDB
TMDB_API_KEY=cb60717161e33e2972bd217aabaa27f4
TMDB_READ_TOKEN=eyJhbGciOiJIUzI1NiJ9...
TMDB_BASE_URL=https://api.themoviedb.org/3
TMDB_IMAGE_URL=https://image.tmdb.org/t/p

# Flask
SESSION_SECRET=5SFn/MRA2tlJluiogVz0oSef30ctJdaCSEG0vQRZrvY6SseayTbK05tQ+prPiLWRBiiQSjbm3p13vybLtvos0Q==
üìé Requisitos t√©cnicos
Python 3.10+

requests, flask, schedule, dotenv, sqlite3

Suporte a Threads ou Async opcional para otimiza√ß√£o futura

Replit com Deploy Always On (ou cron externo se necess√°rio)